#include "ros/ros.h"
#include "sensor_msgs/JointState.h"
#include "output_interface_node.hpp"

int main(int argc, char**argv)
{
  static const double output_freq_ = 40; // freq in hz to send commands to limb
  ros::init(argc, argv, "output_interface");
  OutputManager output_manager;
  ros::Rate loop_rate(output_freq_);

  while (ros::ok())
  {
    output_manager.sendLimbCommand();
    ros::spinOnce();
    loop_rate.sleep();
  }

}

//constructor
OutputManager::OutputManager()
{
  endpt_values_.resize(3);
  endpt_offset_.resize(3);
  endpt_offset_[0] = 0;
  endpt_offset_[1] = 0;
  endpt_offset_[2] = 0;

  grasp_sub_ = n_.subscribe("grasp", 1, &OutputManager::graspCallback, this);
  endpt_sub_= n_.subscribe("endpoint", 1, &OutputManager::endptCallback, this);

  msg_.position = std::vector<double>(27);
  for (int i=0; i<27; i++)
  {
    msg_.position[i] = 0;
  }

  switch (limb_type_)
  {
    case MPL:
      if (is_right_arm_)
      {
        command_pub_ = n_.advertise<sensor_msgs::JointState>("/mpl_vulcanx_interface/right_ep_p6_finger_pv_command",1);
      } 
      else
      {
        command_pub_ = n_.advertise<sensor_msgs::JointState>("/mpl_vulcanx_interface/left_ep_p6_finger_pv_command",1);
      }
      break;

    case JACO:
    ROS_ERROR("JACO NOT IMPLEMENTED!");
    break;

    case IARM:
    ROS_ERROR("iARM NOT IMPLEMENTED!");
    break;

  }
}

void OutputManager::graspCallback(const std_msgs::UInt32::ConstPtr& msg)
{
  grasp_state_ = msg->data > 0;

}

void OutputManager::endptCallback(const harmonie_movement_primitives::endpt_prediction::ConstPtr& msg)
{
  for (int ii=0; ii<endpt_values_.size(); ii++)
  {
    endpt_values_[ii] = (msg->data[ii] - endpt_offset_[ii]) * reach_scale_;
    ROS_INFO("endpt_values_[%d] = %f",ii, endpt_values_[ii]);
  }

}

void OutputManager::sendLimbCommand()
{

  switch (limb_type_)
  {
    case MPL:
      for (int ii=0; ii<3; ii++)
      {
        msg_.position[ii] = endpt_values_[ii];
      }
      ROS_DEBUG("sending endpoint %f %f %f",msg_.position[0],msg_.position[1],msg_.position[2]);
      command_pub_.publish(msg_);
      break;

    case JACO:
      ROS_ERROR("JACO NOT IMPLEMENTED!");
      break;

    case IARM:
      ROS_ERROR("iARM NOT IMPLEMENTED!");
      break;
  }
}
